extend type Query {
  menu: [MenuItem] @cache(ttl: 15)
  category(id: ID!): Category @cache(ttl: 15)
  product(id: ID!): Product @cache(ttl: 5)
  productList(input: ProductListInput): ProductList!
  cart: Cart!
  countryList: CountryList!
  lastOrder: Order @cacheInvalidator(idPath: [{ path: "items", type: "Product" }])
  order(id: ID!): Order
  orderList(pagination: PaginationInput): OrderList
  address(id: ID!): Address
  addressList: AddressList
  customer: Customer
  cmsPage(id: Int, identifier: String): CmsPage
  cmsBlock(identifier: String): CmsBlock
  validatePasswordToken(token: String!): Boolean
}

extend type Mutation {
  setShopCurrency(currency: String!): BackendConfig
  setShopStore(storeCode: String!): BackendConfig
  addToCart(input: AddToCartInput!): CartItemPayload
  updateCartItem(input: UpdateCartItemInput!): CartItemPayload
  removeCartItem(input: RemoveCartItemInput!): RemoveCartItemPayload
  applyCoupon(input: CouponInput!): Boolean
  cancelCoupon: Boolean!
  signUp(input: SignUpInput!): Boolean!
  signIn(input: SignInInput!): Boolean!
  signOut: Boolean!
  editCustomer(input: EditCustomerInput!): Customer
  changePassword(input: ChangePasswordInput!): Boolean
  requestPasswordReset(input: RequestPasswordResetInput!): Boolean
  resetPassword(input: ResetPasswordInput!): Boolean
  editAddress(input: EditAddressInput!): Address
  addAddress(input: AddAddressInput!): Address
  removeAddress(id: ID!): Boolean
  estimateShippingMethods(input: EstimateShippingMethodsInput!): [ShippingMethod!]!
  # set current customer order shipping information
  setShipping(input: SetShippingInput): SetShippingResult!
  placeOrder(input: PlaceOrderInput!): PlaceOrderResult!
}

extend type BackendConfig {
  shop: ShopConfig
}

type ShopConfig {
  activeCurrency: String!
  activeStore: String!
  currencies: [String!]!
  baseCurrency: String!
  stores: [ShopStoreEntry!]!
  timezone: String!
  weightUnit: String!
  sortOrderList: [SortOrder!]!
}

type ShopStoreEntry {
  name: String
  code: String
}

input RequestPasswordResetInput {
  email: String!
}

input PlaceOrderInput {
  billingAddress: CheckoutAddressInput
  email: String
  paymentMethod: PaymentMethodInput!
}

input PaymentMethodInput {
  method: String
  """
  Selected payment-specific payload (like encrypted credit card info)
  """
  additionalData: JSON
}

input SetShippingInput {
  billingAddress: CheckoutAddressInput!
  shippingAddress: CheckoutAddressInput!
  shippingCarrierCode: String!
  shippingMethodCode: String!
}

input EstimateShippingMethodsInput {
  address: CheckoutAddressInput!
}

input FilterInput {
  field: String!
  value: [String!]!
  operator: FilterOperator!
}

enum FilterOperator {
  """
  equals - can bee used also as a set, when array is passed
  """
  eq

  """
  not equals - can be used as "not in set" when array is passed
  """
  neq

  """
  less than
  """
  lt

  """
  less than or equals
  """
  lte

  """
  greater than
  """
  gt

  """
  greater than or equals
  """
  gte

  """
  in the set
  """
  in

  """
  not in the set
  """
  nin

  """
  in the range
  """
  range
}

input EditCustomerInput {
  websiteId: Int!
  firstname: String
  lastname: String
  email: String
  defaultBilling: Boolean
  defaultShipping: Boolean
}

input CheckoutAddressInput {
  id: ID
  # legacy from Magento 2 for placeOrder billingAddress input field
  terms: Boolean

  firstname: String!
  lastname: String!
  city: String
  customerId: Int
  customerAddressId: ID
  postcode: String
  sameAsBilling: Int
  saveInAddressBook: Int
  email: String
  company: String
  countryId: ID!
  region: String
  regionId: ID
  street: [String!]!
  telephone: String
  defaultBilling: Boolean
  defaultShipping: Boolean
}

input AddAddressInput {
  company: String
  firstname: String!
  lastname: String!
  telephone: String
  street: [String]
  postcode: String!
  city: String!
  countryId: ID!
  defaultBilling: Boolean
  defaultShipping: Boolean
  regionId: ID
}

input EditAddressInput {
  id: ID!
  company: String
  firstname: String!
  lastname: String!
  telephone: String
  street: [String!]!
  postcode: String!
  city: String!
  countryId: ID!
  defaultBilling: Boolean
  defaultShipping: Boolean
  regionId: ID
}

input ChangePasswordInput {
  currentPassword: String!
  password: String!
}

input ResetPasswordInput {
  resetToken: String!
  password: String!
}

type OrderList {
  items: [Order]!
  pagination: Pagination
}

type Order {
  id: ID!
  referenceNo: String!
  createdAt: String
  customerFirstname: String
  customerLastname: String
  status: String!
  orderCurrencyCode: String
  baseGrandTotal: Float!
  subtotal: Float!
  shippingAmount: Float!
  taxAmount: Float!
  discountAmount: Float!
  grandTotal: Float!
  items: [OrderItem!]!
  shippingDescription: String
  paymentMethodName: String
  shippingAddress: Address
  billingAddress: Address
  couponCode: String
}

"""
Successful placeOrder result
"""
type PlaceOrderSuccessfulResult {
  """
  Increment order id
  """
  orderId: ID!
  """
  like 0000001 - used for reference by customer
  """
  orderRealId: ID!
}

"""
3D-secure placeOrder result
"""
type PlaceOrder3dSecureResult {
  """
  Issuer URL (target URL) for redirection
  """
  url: String!
  """
  HTTP method (GET or POST)
  """
  method: String!
  """
  List of fields to pass to the issuer page
  """
  fields: [PlaceOrder3dSecureField!]!
}

type PlaceOrder3dSecureField {
  name: String!
  value: String
}

"""
Mixed result for "Mutation.placeOrder" for
"""
union PlaceOrderResult = PlaceOrderSuccessfulResult | PlaceOrder3dSecureResult

type ProductPrice {
  regular: Float!
  special: Float
  minTier: Float
}

type ProductTierPrice {
  qty: Float!
  value: Float!
  discount: Float!
}

type Product {
  id: ID!
  sku: ID! @cacheId
  name: String!
  image: String
  urlPath: String!
  # Full url to resized product image
  thumbnail: String
  price: ProductPrice!
  tierPrices: [ProductTierPrice!]!
  currency: String
  description: String
  stock: Stock
  type: String
  options: [ProductOption!]!
  bundleOptions: [BundleProductOption!]!
  gallery: [GalleryEntry!]!
  breadcrumbs(path: String!): [Breadcrumb] @cache(ttl: 20, idPath: ["$parent"])
  seo: ProductSeo
}

type ShippingMethod {
  carrierTitle: String!
  carrierCode: String!
  methodCode: String!
  methodTitle: String!
  amount: Float!
  priceExclTax: Float!
  priceInclTax: Float!
  currency: String
}

type SetShippingResult {
  paymentMethods: [PaymentMethod!]!
  totals: [CartTotal!]!
}

type PaymentMethod {
  """
  Internal Payment method code (like "paypal_express")
  """
  code: String
  """
  Translated Payment method title (like "PayPal Express Checkout")
  """
  title: String
  """
  Configuration object for the specific Payment method
  """
  config: JSON
}

type MenuItem {
  id: ID! @cacheId
  name: String!
  urlPath: String!
  cssClass: String
  children: [MenuItem!]!
}

type Category {
  id: ID! @cacheId
  name: String
  children: [Category]
  description: String
  breadcrumbs(path: String!): [Breadcrumb]
  productList(input: ProductListInput): CategoryProductList @cache(ttl: 15, idPath: ["$parent", "items"])
}

type CategoryProductList {
  items: [Product!]!
  aggregations: [Aggregation!]!
  pagination: Pagination!
}

input ProductListInput {
  term: String
  filters: [FilterInput!]
  sort: SortOrderInput
  pagination: PaginationInput
}

type ProductList {
  items: [Product!]!
  pagination: Pagination!
}

type Stock {
  isInStock: Boolean
  qty: Float!
}

type ProductSeo {
  title: String
  description: String
  keywords: String
}

type Cart {
  active: Boolean!
  """
  indicates whether products will be shipped or not
  """
  virtual: Boolean!
  items: [CartItem!]!
  itemsCount: Int!
  itemsQty: Int!
  totals: [CartTotal!]!
  quoteCurrency: String @deprecated(reason: "Use ShopConfig.activeCurrency")
  couponCode: String
  billingAddress: Address
}

type CartItem {
  itemId: ID!
  sku: ID!
  qty: Float!
  name: String
  availableQty: Float
  price: Float
  productType: String
  priceInclTax: Float
  rowTotal: Float
  rowTotalInclTax: Float!
  rowTotalWithDiscount: Float
  taxAmount: Float
  taxPercent: Float
  discountAmount: Float
  discountPercent: Float
  weeeTaxAmount: Float
  weeeTaxApplied: Boolean
  thumbnailUrl: String
  urlKey: String
  link: String
  itemOptions: [CartItemOption]
}

type CartItemOption {
  label: String!
  value: String!
  data: [CartItemOptionValue!]!
}

type CartItemOptionValue {
  qty: String!
  name: String!
  price: String!
}

type OrderItem {
  itemId: ID!
  sku: ID!
  qty: Float!
  name: String!
  availableQty: Float!
  price: Float!
  productType: String
  rowTotalInclTax: Float
  basePrice: Float
  basePriceInclTax: Float
  thumbnailUrl: String
  urlKey: String
  link: String
  parentItem: OrderItem
}

type CartTotal {
  code: String!
  title: String!
  value: Float!
}

input AddToCartInput {
  sku: ID!
  qty: Float!
  options: [ProductOptionInput]
  bundleOptions: [BundleProductOptionInput]
}

input ProductOptionInput {
  id: ID!
  value: Int!
}

input BundleProductOptionInput {
  id: ID!
  qty: Float!
  selections: [Int]
}

input UpdateCartItemInput {
  itemId: ID!
  # Magento 2 legacy both itemId and sku need to be provided for rest endpoint to work
  sku: ID!
  qty: Float!
}

input RemoveCartItemInput {
  itemId: ID!
}

input CouponInput {
  couponCode: String!
}

type CartItemPayload {
  itemId: ID!
  sku: String!
  qty: Float!
  name: String
  price: Float!
  productType: String
}

type RemoveCartItemPayload {
  itemId: ID!
}

type Customer {
  id: Int
  websiteId: Int
  addresses: [Address]
  defaultBilling: String
  defaultShipping: String
  email: String
  firstname: String
  lastname: String
  newsletterSubscriber: Boolean
}

type Address {
  id: ID!
  company: String
  firstname: String!
  lastname: String!
  street: [String!]!
  city: String!
  postcode: String!
  country: Country!
  region: Region
  telephone: String
  fax: String
  defaultBilling: Boolean!
  defaultShipping: Boolean!
}

type AddressList {
  items: [Address]!
}

input SignUpInput {
  email: String!
  firstname: String!
  lastname: String!
  password: String!
  autoSignIn: Boolean
}

input SignInInput {
  email: String!
  password: String!
}

type GalleryEntry {
  type: String!
  full: String!
  thumbnail: String!
  embedUrl: String
}

type Breadcrumb {
  name: String!
  urlPath: String
}

type ProductOption {
  id: ID!
  attributeId: String!
  label: String
  position: String
  productId: ID!
  values: [ProductOptionValue!]!
}

type ProductOptionValue {
  inStock: [String!]!
  label: String
  valueIndex: String!
}

type BundleProductOption {
  id: ID!
  position: Int
  productLinks: [BundleProductOptionLink]
  required: Boolean
  sku: ID
  title: String
  type: String
}

type BundleProductOptionLink {
  canChangeQuantity: Int
  name: String
  catalogDisplayPrice: String
  id: String
  isDefault: Boolean
  optionId: Int
  position: Int
  price: String
  priceType: String
  qty: Int
  sku: ID
}

type Region {
  # unique identifier of the region
  id: ID!
  # abbreviated form of the region name
  code: String
  # region name
  name: String
}

type Country {
  # unique identifier of the country
  id: ID!
  # abbreviated form of the country name
  code: String
  # country name in English
  englishName: String
  # country name in locale language
  localName: String
  # regions inside this country
  regions: [Region!]!
}

type CountryList {
  items: [Country!]!
}

type CmsBlock {
  id: ID!
  title: String
  content: String
  active: Boolean
}

type CmsPage {
  id: ID!
  title: String
  content: String
}
